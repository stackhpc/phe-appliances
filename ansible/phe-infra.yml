---
# Ensure the Root FS volume exists
- hosts: openstack
  tasks:
    - name: Create a volume for NFS
      os_volume:
        auth_type: "{{ openstack_auth_type }}"
        auth: "{{ openstack_auth }}"
        state: present
        size: 50
        display_name: infra_home

    - name: Attach to data server
      os_server_volume:
        auth_type: "{{ openstack_auth_type }}"
        auth: "{{ openstack_auth }}"
        state: present
        server: "infra-data-0"
        volume: "infra_home"
        device: /dev/vdb

# Base configuration for all servers to enable net access
- hosts: cluster
  pre_tasks:
  - name: Enable HTTP access via proxy
    lineinfile:
      path: "/etc/environment"
      create: yes
      mode: 0644
      owner: root
      group: root
      line: "{{ item }}"
    become: True
    with_items:
    - "http_proxy={{ phe_http_proxy }}"
    - "https_proxy={{ phe_http_proxy }}"

  - name: Add proxy settings as profile
    copy:
      dest: "/etc/profile.d/phe_proxy.sh"
      mode: 0755
      owner: root
      group: root
      content: |
        export http_proxy={{ phe_http_proxy }}
        export https_proxy={{ phe_http_proxy }}
    become: True

  - name: Add proxy settings as profile
    copy:
      dest: "/etc/sudoers.d/proxy"
      mode: 0644
      owner: root
      group: root
      content: |
        Defaults env_keep += "http_proxy https_proxy"
    become: True

  roles:
    - role: cluster_hosts
    - role: resmo.ntp
      become: true
  environment:
    http_proxy: "http://158.119.150.60:8080"
    https_proxy: "http://158.119.150.60:8080"

- hosts: infra_data
  tasks:

    - name: Ensure NFS server packages are installed
      package:
        name:
          - "nfs-utils"
        state: present
      become: true
      environment:
        http_proxy: "http://158.119.150.60:8080"
        https_proxy: "http://158.119.150.60:8080"

    - set_fact:
        phe_home_export: "/srv{{ phe_home }}"
        phe_home_net_mask: "{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}"
    - set_fact:
        phe_home_cidr: "{{ phe_home_net_mask | ipaddr('net') }}"

    - name: Check the mount status of the volume block device
      command: cat /proc/mounts
      register: mount_data
      
    - set_fact:
        volume_mounted: "{{ mount_data.stdout.find('/dev/vdb1') != -1 }}"
    - debug:
        var: volume_mounted
        
    - name: Prepare and mount volume
      block:
      - name: Partition volume device
        parted:
          device: /dev/vdb
          number: 1
          state: present
      - name: Format partition
        filesystem:
          fstype: ext4
          dev: /dev/vdb1
      - name: Ensure the home directory export point is created
        file:
          path: "/srv{{phe_home}}"
          state: directory
          owner: root
          group: root
          mode: 0755
      - name: Mount filesystem
        mount:
          path: "/srv{{phe_home}}"
          src: "/dev/vdb1"
          fstype: "ext4"
          state: mounted
      become: true
      when: not volume_mounted

    - name: Add the export rule
      lineinfile:
        path: "/etc/exports"
        regexp: "^{{phe_home_export}} .*"
        line: "{{phe_home_export}} {{phe_home_cidr}}(rw,no_root_squash)"
        create: true
        owner: root
        group: root
        mode: 0750
      become: true

    - name: Ensure the NFS service is started
      service:
        name: nfs-server
        enabled: yes
        state: reloaded
      become: true

# Configure the Fortigate VPN (as best we can)
- hosts: infra_net
  roles:
    - role: fortigate_vpn
      fortigate_pkg: "{{ fortigate_pkg }}"
      fortigate_cfg: "{{ hpcdirect_fortigate }}"

- hosts: infra_user
  pre_tasks:
    - name: Ensure the PHE home directory mount point exists
      file:
        path: "{{ phe_home }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      become: true

    - name: Ensure the PHE home directory is mounted
      mount:
        path: "{{ phe_home }}"
        src: "{{hostvars['infra-data-0'].ansible_default_ipv4.address}}:{{hostvars['infra-data-0'].phe_home_export}}"
        fstype: nfs
        state: mounted
        boot: yes
        opts: "_netdev,noatime"
      become: true

    - name: Ensure RDO repo is present
      package:
        name: "centos-release-openstack-pike"
        state: present
      environment:
        http_proxy: "http://158.119.150.60:8080"
        https_proxy: "http://158.119.150.60:8080"
      become: true
      when: ansible_os_family == "RedHat"

    - name: Install OpenStack client packages and dependencies
      package:
        name:
          - "vim"
          - "git"
          - "gcc"
          - "python-dev"
          - "python-virtualenv"
          - "python-openstackclient"
          - "python-heatclient"
          - "python-barbicanclient"
        state: present
      environment:
        http_proxy: "http://158.119.150.60:8080"
        https_proxy: "http://158.119.150.60:8080"
      become: true

    - name: Write the PHE CRT (RedHat)
      block:
      - file:
          dest: "/etc/pki/ca-trust/source/anchors"
          state: directory
          owner: root
          group: root
          mode: 0755
          create: true
      - copy:
          dest: "/usr/local/share/ca-certificates/pheunix-ca.crt"
          owner: root
          group: root
          mode: 0644
          content: "{{ pheunix_ca_crt }}"
        register: copy_crt
      - command: update-ca-trust extract
        when: copy_crt.changed
      become: true
      when: ansible_os_family == "RedHat"

    - name: Write the PHE CRT (Debian)
      block:
      - copy:
          dest: "/usr/local/share/ca-certificates/pheunix-ca.crt"
          owner: root
          group: root
          mode: 0644
          content: "{{ pheunix_ca_crt }}"
      - command: update-ca-certificates
      become: true
      when: ansible_os_family == "Debian"

    - name: Extract the infra_net IP
      set_fact:
        gw_ip: "{{ hostvars['infra-net-0']['ansible_default_ipv4']['address'] }}"

    - name: Read routing table
      command: "ip route list"
      become: True
      register: route_table

    - name: Configure routes for VPN
      command: "ip route add {{ item }} via {{ gw_ip }}"
      become: true
      when: route_table.stdout.find(item) == -1
      with_items:
        - "172.27.0.0/16"
        - "10.109.0.0/16"

  roles:
    - role: singleplatform-eng.users
      become: true
      users: "{{ phe_users }}"
      groups_to_create: "{{ phe_groups }}"

    - role: stackhpc.os-config
      os_config_content: "{{ cloud_config }}"
 
  post_tasks:
    - name: Assign cloudadm group access to clouds.yaml
      file:
        path: "/etc/openstack/clouds.yaml"
        owner: "root"
        group: "cloudadm"
        mode: 0640
        state: file
      become: true
